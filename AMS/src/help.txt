

// main package



		// AirlineManagementSystem



 ------------------------------------------------------------



package main;



import java.util.*;



import java.text.*;



import models.*;



import services.*;



import utils.*;



public class AirlineManagementSystem {



 private static Scanner sc = new Scanner(System.in);



 private static UserService userService = new UserService();



 private static CarrierService carrierService = new CarrierService();



 private static FlightService flightService = new FlightService();



 private static BookingService bookingService = new BookingService();



 public static void main(String[] args) {



 while (true) {



  System.out.println("Welcome to Airline Management System - AMS");



  System.out.println("1. Admin Sign-in");



  System.out.println("2. Customer Sign-in");



  System.out.println("3. Customer Sign-up");



  System.out.println("4. Exit");



  int choice = Utils.getIntInput("Enter your choice: ");



  switch (choice) {



  case 1:



  adminSignIn();



  break;



  case 2:



  customerSignIn();



  break;



  case 3:



  customerSignUp();



  break;



  case 4:



  System.out.println("Exiting AMS. Goodbye!");



  System.exit(0);



  default:



  System.out.println("Invalid Choice. Please try again.");



  }



 }



 }



 // Admin Sign-in



 private static void adminSignIn() {



 int userId = Utils.getIntInput("Enter Admin UserID: ");



 String password = Utils.getStringInput("Enter Admin Password: ");



 Admin admin = userService.authenticateAdmin(userId, password);



 if (admin != null) {



  System.out.println("Admin Sign-in Successful.");



  adminMenu();



 } else {



  System.out.println("Invalid Admin Credentials.");



 }



 }



 // Admin Menu



 private static void adminMenu() {



 while (true) {



  System.out.println("\n--- Admin Menu ---");



  System.out.println("1. Add Carrier");



  System.out.println("2. Edit Carrier Details by CarrierId");



  System.out.println("3. Show all the available Carriers");



  System.out.println("4. Remove Carrier by Id");



  System.out.println("5. Flight Cancellation - Refund Price Calculation");



  System.out.println("6. Search All the available flights");



  System.out.println("7. Exit AMS");



  int choice = Utils.getIntInput("Enter your choice: ");



  switch (choice) {



  case 1:



  addCarrier();



  break;



  case 2:



  editCarrier();



  break;



  case 3:



  showAllCarrier();



  break;



  case 4:



  removeCarrier();



  break;



  case 5:



  flightCancellation();



  break;



  case 6:



  searchAllAvailableFlights();



  break;



  case 7:



  System.out.println("Exiting AMS. Goodbye!");



  System.exit(0);



  default:



  System.out.println("Invalid Choice. Please try again.");



  }



 }



 }



 public static void showAllCarrier() {



 List<Carrier> answer= carrierService.getAllCarriers();



 for(Carrier carrier: answer) {



  System.out.println("Carrier details:" + carrier.getCarrierName() +" " +carrier.getCarrierId() );



 }



 }



 // display all the flights between origin and destination location



 private static void searchAllAvailableFlights() {



 System.out.println("\n--- Search All the available flights ---");



 System.out.println("\n--- Please enter the below details ---");



 String flightOrigin = Utils.getStringInput("Enter Flight origin: ");



 String flightDestination = Utils.getStringInput("Enter Flight destination: ");



 Date travelDate = Utils.getDateInput("Enter Travel date: ");



 List<Flight> allFlights= flightService.getAllFlightsFromOriginToDestination(flightOrigin, flightDestination, travelDate);



 for(Flight flight: allFlights) {



  System.out.print(flight.getFlightId());



 }



 }



 // Add Carrier



 private static void addCarrier() {



 System.out.println("\n--- Add Carrier ---");



 String carrierName = Utils.getStringInput("Enter Carrier Name: ");



 int discount30 = Utils.getIntInput("Enter Discount Percentage for 30 Days Advance Booking: ");



 int discount60 = Utils.getIntInput("Enter Discount Percentage for 60 Days Advance Booking: ");



 int discount90 = Utils.getIntInput("Enter Discount Percentage for 90 Days Advance Booking: ");



 int bulkDiscount = Utils.getIntInput("Enter Bulk Booking Discount Percentage: ");



 int refund2 = Utils.getIntInput("Enter Refund Percentage for Cancellation 2 Days Before: ");



 int refund10 = Utils.getIntInput("Enter Refund Percentage for Cancellation 10 Days Before: ");



 int refund20 = Utils.getIntInput("Enter Refund Percentage for Cancellation 20 Days or More Before: ");



 int silver = Utils.getIntInput("Enter Silver User Discount Percentage: ");



 int gold = Utils.getIntInput("Enter Gold User Discount Percentage: ");



 int platinum = Utils.getIntInput("Enter Platinum User Discount Percentage: ");



 carrierService.addCarrier(carrierName, discount30, discount60, discount90, bulkDiscount,



  refund2, refund10, refund20, silver, gold, platinum);



 }



 // Edit Carrier



 private static void editCarrier() {



 System.out.println("\n--- Edit Carrier Details ---");



 int carrierId = Utils.getIntInput("Enter Carrier ID to Edit: ");



 carrierService.editCarrier(carrierId, sc);



 }



 // Remove Carrier



 private static void removeCarrier() {



 System.out.println("\n--- Remove Carrier ---");



 int carrierId = Utils.getIntInput("Enter Carrier ID to Remove: ");



 carrierService.removeCarrier(carrierId, flightService.getAllFlights());



 }



 // Flight Cancellation - Refund Price Calculation



 private static void flightCancellation() {



 System.out.println("\n--- Flight Cancellation - Refund Price Calculation ---");



 int flightId = Utils.getIntInput("Enter Flight ID: ");



 Flight flight = flightService.getFlightById(flightId);



 if (flight == null) {



  System.out.println("Flight ID not found.");



  return;



 }



 Date travelDate = flight.getTravelDate();



 List<Booking> bookings = bookingService.getBookingsByFlightAndDate(flightId, travelDate, flightService);



 if (bookings.isEmpty()) {



  System.out.println("No bookings found for this flight.");



  return;



 }



 double totalRefund = 0.0;



 for (Booking booking : bookings) {



  totalRefund += booking.getTotalAmount();



 }



 // Calculate loss for carrier



 // Assuming loss is totalRefund plus 10% extra if cancellation within a week



 Date currentDate = new Date();



 long diffInMillies = flight.getTravelDate().getTime() - currentDate.getTime();



 long daysDiff = diffInMillies / (1000 * 60 * 60 * 24);



 double loss = totalRefund;



 if (daysDiff <= 7) {



  loss += totalRefund * 0.10; // 10% extra



 }



 System.out.println("Total Refund to Customers: $" + totalRefund);



 System.out.println("Total Loss to Carrier: $" + loss);



 }



 // Customer Sign-in



 private static void customerSignIn() {



 int userId = Utils.getIntInput("Enter Customer UserID: ");



 String password = Utils.getStringInput("Enter Customer Password: ");



 Customer customer = userService.authenticateCustomer(userId, password);



 if (customer != null) {



  System.out.println("Customer Sign-in Successful.");



  customerMenu(customer);



 } else {



  System.out.println("Invalid Customer Credentials.");



 }



 }



 // Customer Menu



 private static void customerMenu(Customer customer) {



 while (true) {



  System.out.println("\n--- Customer Menu ---");



  System.out.println("1. Customer Registration");



  System.out.println("2. Edit Customer Profile");



  System.out.println("3. Ticket Booking - Price Calculation");



  System.out.println("4. Ticket Cancellation - Refund Price Calculation");



  System.out.println("5. Exit AMS");



  int choice = Utils.getIntInput("Enter your choice: ");



  switch (choice) {



  case 1:



  // Registration is handled separately



  System.out.println("You are already registered and signed in.");



  break;



  case 2:



  editCustomerProfile(customer);



  break;



  case 3:



  bookTicket(customer);



  break;



  case 4:



  cancelTicket(customer);



  break;



  case 5:



  System.out.println("Exiting AMS. Goodbye!");



  System.exit(0);



  default:



  System.out.println("Invalid Choice. Please try again.");



  }



 }



 }



 // Edit Customer Profile



 private static void editCustomerProfile(Customer customer) {



 System.out.println("\n--- Edit Customer Profile ---");



 System.out.println("Leave field blank to keep current value.");



 String userName = Utils.getStringInput("Enter new UserName (" + customer.getUserName() + "): ");



 if (!userName.isEmpty())



  customer.setUserName(userName);



 String password = Utils.getStringInput("Enter new Password: ");



 if (!password.isEmpty())



  customer.setPassword(password);



 String phoneStr = Utils.getStringInput("Enter new Phone (" + customer.getPhone() + "): ");



 if (!phoneStr.isEmpty()) {



  try {



  long phone = Long.parseLong(phoneStr);



  customer.setPhone(phone);



  } catch (NumberFormatException e) {



  System.out.println("Invalid phone number. Keeping previous value.");



  }



 }



 String emailId = Utils.getStringInput("Enter new EmailId (" + customer.getEmailId() + "): ");



 if (!emailId.isEmpty())



  customer.setEmailId(emailId);



 String address1 = Utils.getStringInput("Enter new Address1 (" + customer.getAddress1() + "): ");



 if (!address1.isEmpty())



  customer.setAddress1(address1);



 String address2 = Utils.getStringInput("Enter new Address2 (" + customer.getAddress2() + "): ");



 if (!address2.isEmpty())



  customer.setAddress2(address2);



 String city = Utils.getStringInput("Enter new City (" + customer.getCity() + "): ");



 if (!city.isEmpty())



  customer.setCity(city);



 String state = Utils.getStringInput("Enter new State (" + customer.getState() + "): ");



 if (!state.isEmpty())



  customer.setState(state);



 String country = Utils.getStringInput("Enter new Country (" + customer.getCountry() + "): ");



 if (!country.isEmpty())



  customer.setCountry(country);



 String zipStr = Utils.getStringInput("Enter new ZipCode (" + customer.getZipCode() + "): ");



 if (!zipStr.isEmpty()) {



  try {



  long zip = Long.parseLong(zipStr);



  customer.setZipCode(zip);



  } catch (NumberFormatException e) {



  System.out.println("Invalid ZipCode. Keeping previous value.");



  }



 }



 String dobStr = Utils.getStringInput("Enter new DOB (dd-MM-yyyy): ");



 if (!dobStr.isEmpty()) {



  SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");



  try {



  Date dob = sdf.parse(dobStr);



  customer.setDob(dob);



  } catch (Exception e) {



  System.out.println("Invalid DOB format. Keeping previous value.");



  }



 }



 System.out.println("Profile Updated Successfully.");



 customer.displayProfile();



 }



 // Book Ticket



 private static void bookTicket(Customer customer) {



 System.out.println("\n--- Ticket Booking ---");



 int flightId = Utils.getIntInput("Enter Flight ID to Book: ");



 Flight flight = flightService.getFlightById(flightId);



 if (flight == null) {



  System.out.println("Flight ID not found.");



  return;



 }



 int ticketCount = Utils.getIntInput("Enter Ticket Count: ");



 String seatCategory = Utils.getStringInput("Enter Seat Category (Economy/Business/Executive): ");



 String customerCategory = Utils.getStringInput("Enter customer Category: ");



 // Calculate Airfare based on seat category



 double baseAirfare = flight.getAirfare();



 double airfare = 0.0;



 switch (seatCategory.toLowerCase()) {



 case "economy":



  airfare = baseAirfare;



  break;



 case "business":



  airfare = 2 * baseAirfare;



  break;



 case "executive":



  airfare = 5 * baseAirfare;



  break;



 default:



  System.out.println("Invalid Seat Category. Defaulting to Economy.");



  airfare = baseAirfare;



 }



 double total = airfare * ticketCount;



 // Apply Discounts



 int daysBefore = Utils.getIntInput("Enter number of days before travel to book: ");



 Carrier carrier = carrierService.getCarrierById(flight.getCarrierId());



 if (carrier != null) {



  if (daysBefore >= 90) {



  total -= total * (carrier.getDiscount90DaysAdvance() / 100.0);



  } else if (daysBefore >= 60) {



  total -= total * (carrier.getDiscount60DaysAdvance() / 100.0);



  } else if (daysBefore >= 30) {



  total -= total * (carrier.getDiscount30DaysAdvance() / 100.0);



  }



 }



 if (ticketCount >= 10) {



  total -= total * 0.02; // 2% discount



 }



 if (customerCategory.equalsIgnoreCase("Silver")) {



  total -= total * 0.01;



 } else if (customerCategory.equalsIgnoreCase("Gold")) {



  total -= total * 0.02;



 } else if (customerCategory.equalsIgnoreCase("Platinum")) {



  total -= total * 0.04;



 }



 System.out.println("Total Booking Amount after Discounts: $" + total);



 bookingService.bookTicket(flightId, customer.getUserId(), ticketCount, seatCategory, customerCategory, total);



 }



 // Cancel Ticket



 private static void cancelTicket(Customer customer) {



 System.out.println("\n--- Ticket Cancellation ---");



 int bookingId = Utils.getIntInput("Enter Booking ID to Cancel: ");



 Booking booking = bookingService.getBookingById(bookingId);



 if (booking == null) {



  System.out.println("Booking ID not found.");



  return;



 }



 // Assume we have travel date information; for simplicity, skipping date checks



 System.out.println("Calculating Refund Amount...");



 // For simplicity, let's assume cancellation is being done today



 Date currentDate = new Date();



 Flight flight = flightService.getFlightById(booking.getFlightId());



 if (flight == null) {



  System.out.println("Associated Flight not found.");



  return;



 }



 long diffInMillies = flight.getTravelDate().getTime() - currentDate.getTime();



 long daysDiff = diffInMillies / (1000 * 60 * 60 * 24);



 double refundPercentage = 0.0;



 Carrier carrier = carrierService.getCarrierById(flight.getCarrierId());



 if (carrier != null) {



  if (daysDiff >= 20) {



  refundPercentage = carrier.getRefundBefore20Days();



  } else if (daysDiff >= 10) {



  refundPercentage = carrier.getRefundBefore10Days();



  } else if (daysDiff >= 2) {



  refundPercentage = carrier.getRefundBefore2Days();



  } else {



  refundPercentage = 0.0; // No refund



  }



 }



 double refundAmount = booking.getTotalAmount() * (refundPercentage / 100.0);



 System.out.println("Refund Amount: $" + refundAmount);



 bookingService.cancelBooking(bookingId);



 }



 // Customer signup



 public static void customerSignUp() {



 int userId = Utils.getIntInput("Enter the customerId: ");



 String userName = Utils.getStringInput("Enter the userName: ");



 String password = Utils.getStringInput("Enter the password: ");



 long phone = Utils.getLongInput("Enter the phone number: ");



 String emailId = Utils.getStringInput("Enter the emailId: ");



 String address1 = Utils.getStringInput("Enter the address1: ");



 String address2 = Utils.getStringInput("Enter the address2: ");



 String city = Utils.getStringInput("Enter the city: ");



 String state = Utils.getStringInput("Enter the state: ");



 String country = Utils.getStringInput("Enter the country: ");



 long zipCode = Utils.getLongInput("Enter the zipCode: ");



 Date dob = Utils.getDateInput("Enter the Date of birth: ");



 Customer customer = new Customer(userId, userName, password, phone, emailId, address1, address2,



  city, state, country, zipCode, dob);



 userService.addCustomer(customer);



 }



}



---------------------------------------------------------------------







// models package



			//Admin code







---------------------------------------------------------------------



package models;







public class Admin extends User{



 public Admin(int userId, String userName, String password) {



 this.userId= userId;



 this.userName= userName;



 this.password= password;



 this.role= "Admin";



 }



 public boolean verifyPassword(String currPassword) {



 return password.equals(currPassword);



 }



}



---------------------------------------------------------------------







package models;







public class Booking {



 private static int bookingCounter = 5000;



  private int bookingId;



  private int flightId;



  private int userId;



  private int ticketCount;



  private String seatCategory;



  private String customerCategory;



  private double totalAmount;



  public Booking(int flightId, int userId, int ticketCount, String seatCategory, String customerCategory, double totalAmount) {



    this.bookingId = bookingCounter++;



    this.flightId = flightId;



    this.userId = userId;



    this.ticketCount = ticketCount;



    this.seatCategory = seatCategory;



    this.customerCategory = customerCategory;



    this.totalAmount = totalAmount;



  }



  // Getters



  public int getBookingId() {



   return bookingId;



  }



  public int getFlightId() {



   return flightId;



  }



  public int getUserId() {



   return userId;



  }



  public int getTicketCount() {



   return ticketCount;



  }



  public String getSeatCategory() {



   return seatCategory;



  }



  public String getCustomerCategory() {



   return customerCategory;



  }



  public double getTotalAmount() {



   return totalAmount;



  }



  // Setters



  public void setTotalAmount(double amount) {



   this.totalAmount = amount;



  }



}







--------------------------------------------------------------------------







package models;







public class Carrier {



 private static int carrierCounter = 1000;



  private int carrierId;



  private String carrierName;



  private int discount30DaysAdvance;



  private int discount60DaysAdvance;



  private int discount90DaysAdvance;



  private int bulkBookingDiscount;



  private int refundBefore2Days;



  private int refundBefore10Days;



  private int refundBefore20Days;



  private int silverUserDiscount;



  private int goldUserDiscount;



  private int platinumUserDiscount;



  //constructor



 public Carrier(String carrierName, int discount30DaysAdvance, int discount60DaysAdvance,



  int discount90DaysAdvance, int bulkBookingDiscount, int refundBefore2Days, int refundBefore10Days,



  int refundBefore20Days, int silverUserDiscount, int goldUserDiscount, int platinumUserDiscount) {



 this.carrierId = carrierCounter++;



 this.carrierName = carrierName;



 this.discount30DaysAdvance = discount30DaysAdvance;



 this.discount60DaysAdvance = discount60DaysAdvance;



 this.discount90DaysAdvance = discount90DaysAdvance;



 this.bulkBookingDiscount = bulkBookingDiscount;



 this.refundBefore2Days = refundBefore2Days;



 this.refundBefore10Days = refundBefore10Days;



 this.refundBefore20Days = refundBefore20Days;



 this.silverUserDiscount = silverUserDiscount;



 this.goldUserDiscount = goldUserDiscount;



 this.platinumUserDiscount = platinumUserDiscount;



 }



 public static int getCarrierCounter() {



 return carrierCounter;



 }



 public int getCarrierId() {



 return carrierId;



 }



 public String getCarrierName() {



 return carrierName;



 }



 public int getDiscount30DaysAdvance() {



 return discount30DaysAdvance;



 }



 public int getDiscount60DaysAdvance() {



 return discount60DaysAdvance;



 }



 public int getDiscount90DaysAdvance() {



 return discount90DaysAdvance;



 }



 public int getBulkBookingDiscount() {



 return bulkBookingDiscount;



 }



 public int getRefundBefore2Days() {



 return refundBefore2Days;



 }



 public int getRefundBefore10Days() {



 return refundBefore10Days;



 }



 public int getRefundBefore20Days() {



 return refundBefore20Days;



 }



 public int getSilverUserDiscount() {



 return silverUserDiscount;



 }



 public int getGoldUserDiscount() {



 return goldUserDiscount;



 }



 public int getPlatinumUserDiscount() {



 return platinumUserDiscount;



 }



 public void displayCarrierInfo() {



   System.out.println("CarrierID: " + carrierId);



   System.out.println("CarrierName: " + carrierName);



   System.out.println("DiscountPercentage30DaysAdvanceBooking: " + discount30DaysAdvance + "%");



   System.out.println("DiscountPercentage60DaysAdvanceBooking: " + discount60DaysAdvance + "%");



   System.out.println("DiscountPercentage90DaysAdvanceBooking: " + discount90DaysAdvance + "%");



   System.out.println("BulkBookingDiscount: " + bulkBookingDiscount + "%");



   System.out.println("RefundPercentageForTicketCancellation2DaysBeforeTravelDate: " + refundBefore2Days + "%");



   System.out.println("RefundPercentageForTicketCancellation10DaysBeforeTravelDate: " + refundBefore10Days + "%");



   System.out.println("RefundPercentageForTicketCancellation20DaysOrMoreBeforeTravelDate: " + refundBefore20Days + "%");



   System.out.println("SilverUserDiscount: " + silverUserDiscount + "%");



   System.out.println("GoldUserDiscount: " + goldUserDiscount + "%");



   System.out.println("PlatinumUserDiscount: " + platinumUserDiscount + "%");



  }



 public static void setCarrierCounter(int carrierCounter) {



 Carrier.carrierCounter = carrierCounter;



 }



 public void setCarrierId(int carrierId) {



 this.carrierId = carrierId;



 }



 public void setCarrierName(String carrierName) {



 this.carrierName = carrierName;



 }



 public void setDiscount30DaysAdvance(int discount30DaysAdvance) {



 this.discount30DaysAdvance = discount30DaysAdvance;



 }



 public void setDiscount60DaysAdvance(int discount60DaysAdvance) {



 this.discount60DaysAdvance = discount60DaysAdvance;



 }



 public void setDiscount90DaysAdvance(int discount90DaysAdvance) {



 this.discount90DaysAdvance = discount90DaysAdvance;



 }



 public void setBulkBookingDiscount(int bulkBookingDiscount) {



 this.bulkBookingDiscount = bulkBookingDiscount;



 }



 public void setRefundBefore2Days(int refundBefore2Days) {



 this.refundBefore2Days = refundBefore2Days;



 }



 public void setRefundBefore10Days(int refundBefore10Days) {



 this.refundBefore10Days = refundBefore10Days;



 }



 public void setRefundBefore20Days(int refundBefore20Days) {



 this.refundBefore20Days = refundBefore20Days;



 }



 public void setSilverUserDiscount(int silverUserDiscount) {



 this.silverUserDiscount = silverUserDiscount;



 }



 public void setGoldUserDiscount(int goldUserDiscount) {



 this.goldUserDiscount = goldUserDiscount;



 }



 public void setPlatinumUserDiscount(int platinumUserDiscount) {



 this.platinumUserDiscount = platinumUserDiscount;

 }

}







--------------------------------------------------------------------------------------------------------------



package models;



import java.util.*;



import java.text.*;







public class Customer extends User{



 private long phone;



 private String emailId;



 private String address1;



 private String address2;



 private String city;



 private String state;



 private String country;



 private long zipCode;



 private Date dob;



 private String userCategory;



 public Customer(int userId, String userName, String password, long phone, String emailId,



  String address1, String address2, String city,String state, String country,



  long zipCode, Date dob) {



 this.userId= userId;



 this.userName= userName;



 this.password= password;



 this.phone= phone;



 this.emailId= emailId;



 this.address1= address1;



 this.address2= address2;



 this.city= city;



 this.state= state;



 this.country= country;



 this.zipCode= zipCode;



 this.dob= dob;



 //default populated



 this.role= "Customer";



 this.userCategory="";



 }



 public String getUserName() {



 return userName;



 }



 public void setUserName(String userName) {



 this.userName= userName;



 }



 public boolean verifyPassword(String currPassword) {



 return password.equals(currPassword);



 }



 public void setPassword(String password) {



 this.password= password;



 }



 public long getPhone() {



 return phone;



 }



 public void setPhone(long phone) {



 this.phone = phone;



 }



 public String getEmailId() {



 return emailId;



 }



 public void setEmailId(String emailId) {



 this.emailId = emailId;



 }



 public String getAddress1() {



 return address1;



 }



 public void setAddress1(String address1) {



 this.address1 = address1;



 }



 public String getAddress2() {



 return address2;



 }



 public void setAddress2(String address2) {



 this.address2 = address2;



 }



 public String getCity() {



 return city;



 }



 public void setCity(String city) {



 this.city = city;



 }



 public String getState() {



 return state;



 }



 public void setState(String state) {



 this.state = state;



 }



 public String getCountry() {



 return country;



 }



 public void setCountry(String country) {



 this.country = country;



 }



 public long getZipCode() {



 return zipCode;



 }



 public void setZipCode(long zipCode) {



 this.zipCode = zipCode;



 }



 public Date getDob() {



 return dob;



 }



 public void setDob(Date dob) {



 this.dob = dob;



 }



 public String getUserCategory() {



 return userCategory;



 }



 public void setUserCategory(String userCategory) {



 this.userCategory = userCategory;



 }



 public void displayProfile() {



  SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");



   System.out.println("UserID: " + userId);



   System.out.println("UserName: " + userName);



   System.out.println("Phone: " + phone);



   System.out.println("EmailId: " + emailId);



   System.out.println("Address1: " + address1);



   System.out.println("Address2: " + address2);



   System.out.println("City: " + city);



   System.out.println("State: " + state);



   System.out.println("Country: " + country);



   System.out.println("ZipCode: " + zipCode);



   System.out.println("DOB: " + sdf.format(dob));



   System.out.println("Role: " + role);



   System.out.println("UserCategory: " + userCategory);



 }



}







-------------------------------------------------------------------------------------







package models;



import java.util.*;



import java.text.*;



public class Flight {



 private static int flightCounter = 1000;



  private int flightId;



  private int carrierId;



  private String origin;



  private String destination;



  private Date travelDate;



  private double airfare;



  public Flight(int carrierId, String origin, String destination, Date travelDate, double airfare) {



    this.flightId = flightCounter++;



    this.carrierId = carrierId;



    this.origin = origin;



    this.destination = destination;



    this.travelDate = travelDate;



    this.airfare = airfare;



  }



  public int getFlightId() {



   return flightId;



  }



  public int getCarrierId() {



   return carrierId;



  }



   public void setCarrierId(int carrierId) {



   this.carrierId = carrierId;



   }



   public String getOrigin() {



   return origin;



   }



   public void setOrigin(String origin) {



   this.origin = origin;



   }



   public String getDestination() {



   return destination;



   }



   public void setDestination(String destination) {



   this.destination = destination;



   }



   public Date getTravelDate() {



   return travelDate;



   }



   public void setTravelDate(Date travelDate) {



   this.travelDate = travelDate;



   }



   public double getAirfare() {



   return airfare;



   }



   public void setAirfare(double airfare) {



   this.airfare = airfare;



   }



   // Display Flight Information



    public void displayFlightInfo() {



     SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");



     System.out.println("FlightID: " + flightId);



     System.out.println("CarrierID: " + carrierId);



     System.out.println("Origin: " + origin);



     System.out.println("Destination: " + destination);



     System.out.println("Travel Date: " + sdf.format(travelDate));



     System.out.println("Airfare: $" + airfare);



    }



}







-----------------------------------------------------------------------------------------------------







package models;







abstract class User {



 protected int userId;



 protected String userName;



 protected String password;



 protected String role;



 public int getUserId() {



 return userId;



 }



 public String getRole() {



 return role;



 }



}











---------------------------------------------------------------------------------------------------------







// Services model



		



			// BookingService







---------------------------------------------------------------------------------------------------------



package services;







import java.util.*;



import models.Booking;



import models.Flight;



public class BookingService {



 private List<Booking> bookings = new ArrayList<>();



 // Book Ticket



 public Booking bookTicket(int flightId, int userId, int ticketCount, String seatCategory,



  String customerCategory, double totalAmount) {



 Booking booking = new Booking(flightId, userId, ticketCount, seatCategory, customerCategory, totalAmount);



 bookings.add(booking);



 System.out.println("Ticket Booked Successfully. Booking ID: " + booking.getBookingId());



 return booking;



 }



 public Booking getBookingById(int bookingId) {



 for (Booking booking : bookings) {



  if (booking.getBookingId() == bookingId) {



  return booking;



  }



 }



 return null;



 }



 public List<Booking> getBookingsByFlightAndDate(int flightId, Date travelDate, FlightService flightService) {



 List<Booking> result = new ArrayList<>();



 Flight flight = flightService.getFlightById(flightId);



 if (flight != null && flight.getTravelDate().equals(travelDate)) {



  for (Booking booking : bookings) {



  if (booking.getFlightId() == flightId) {



   result.add(booking);



  }



  }



 }



 return result;



 }



 public List<Booking> getAllBookings() {



 return bookings;



 }



 public void cancelBooking(int bookingId) {



 Booking booking = getBookingById(bookingId);



 if (booking != null) {



  bookings.remove(booking);



  System.out.println("Booking Cancelled Successfully.");



 } else {



  System.out.println("Booking ID not found.");



 }



 }



}



---------------------------------------------------------------------------------------------------------







		//CarrierService







---------------------------------------------------------------------------------------------------------



package services;







import java.util.*;



import models.Carrier;



import models.Flight;



public class CarrierService {



 private List<Carrier> carriers = new ArrayList<>();



 // Add carrier



 public void addCarrier(String carrierName, int discount30, int discount60, int discount90,



  int bulkDiscount, int refund2, int refund10, int refund20,



  int silver, int gold, int platinum) {



 Carrier carrier = new Carrier(carrierName, discount30, discount60, discount90,



  bulkDiscount, refund2, refund10, refund20, silver, gold, platinum);



 carriers.add(carrier);



 System.out.println("Carrier Information Saved Successfully in the System.");



 }



 // Edit Carrier



 public void editCarrier(int carrierId, Scanner sc) {



 Carrier carrier = getCarrierById(carrierId);



 if (carrier != null) {



  System.out.println("Editing Carrier ID: " + carrierId);



  System.out.print("Enter new Carrier Name (" + carrier.getCarrierName() + "): ");



  String name = sc.nextLine();



  if (!name.isEmpty()) {



  carrier.setCarrierName(name);



  }



  // Helper method to parse integer input



  carrier.setDiscount30DaysAdvance(



   parseIntegerInput(sc, "Enter new Discount 30 Days (%)", carrier.getDiscount30DaysAdvance()));



  carrier.setDiscount60DaysAdvance(



   parseIntegerInput(sc, "Enter new Discount 60 Days (%)", carrier.getDiscount60DaysAdvance()));



  carrier.setDiscount90DaysAdvance(



   parseIntegerInput(sc, "Enter new Discount 90 Days (%)", carrier.getDiscount90DaysAdvance()));



  carrier.setBulkBookingDiscount(



   parseIntegerInput(sc, "Enter new Bulk Booking Discount (%)", carrier.getBulkBookingDiscount()));



  carrier.setRefundBefore2Days(parseIntegerInput(sc, "Enter new Refund Percentage for 2 Days Before (%)",



   carrier.getRefundBefore2Days()));



  carrier.setRefundBefore10Days(parseIntegerInput(sc, "Enter new Refund Percentage for 10 Days Before (%)",



   carrier.getRefundBefore10Days()));



  carrier.setRefundBefore20Days(parseIntegerInput(sc, "Enter new Refund Percentage for 20 Days Before (%)",



   carrier.getRefundBefore20Days()));



  carrier.setSilverUserDiscount(



   parseIntegerInput(sc, "Enter new Silver User Discount (%)", carrier.getSilverUserDiscount()));



  carrier.setGoldUserDiscount(



   parseIntegerInput(sc, "Enter new Gold User Discount (%)", carrier.getGoldUserDiscount()));



  carrier.setPlatinumUserDiscount(



   parseIntegerInput(sc, "Enter new Platinum User Discount (%)", carrier.getPlatinumUserDiscount()));



  System.out.println("Carrier Information Updated Successfully.");



 } else {



  System.out.println(



   "Either the data is incorrect or no Carrier Information is available for the given Carrier ID.");



 }



 }



 // Helper method to parse integer input with a default value



 private int parseIntegerInput(Scanner sc, String prompt, int defaultValue) {



 System.out.print(prompt + " (current: " + defaultValue + "): ");



 String input = sc.nextLine();



 try {



  if (!input.isEmpty()) {



  return Integer.parseInt(input);



  }



 } catch (NumberFormatException e) {



  System.out.println("Invalid number format, keeping the previous value.");



 }



 return defaultValue;



 }



 // Remove Carrier



 public void removeCarrier(int carrierId, List<Flight> flights) {



 Carrier carrier = getCarrierById(carrierId);



 if (carrier != null) {



  // Check if any flight is mapped to this carrier



  boolean hasFlights = false;



  for (Flight flight : flights) {



  if (flight.getCarrierId() == carrierId) {



   hasFlights = true;



   break;



  }



  }



  if (hasFlights) {



  System.out



   .println("Remove All Flights Mapped to this Carrier before deleting this Carrier for system.");



  } else {



  carriers.remove(carrier);



  System.out.println("Carrier Information successfully removed from system.");



  }



 } else {



  System.out.println(



   "Either the data is incorrect or no Carrier Information is available for the given Carrier ID.");



 }



 }



 // returns the carrier details with the given carrierId



 public Carrier getCarrierById(int carrierId) {



 for (Carrier carrier : carriers) {



  if (carrier.getCarrierId() == carrierId) {



  return carrier;



  }



 }



 return null;



 }



 public void displayAllCarriers() {



 if (carriers.isEmpty()) {



  System.out.println("No Carriers Available.");



  return;



 }



 for (Carrier carrier : carriers) {



  carrier.displayCarrierInfo();



  System.out.println("----------------------------");



 }



 }



 public List<Carrier> getAllCarriers(){



 return carriers;



 }



}







---------------------------------------------------------------------------------------------------------







		// FlightService class



---------------------------------------------------------------------------------------------------------



package services;







import java.util.*;



import models.Flight;



public class FlightService {



 private List<Flight> flights = new ArrayList<>();



 // Add Flight



 public void addFlight(int carrierId, String origin, String destination, Date travelDate, double airfare) {



 Flight flight = new Flight(carrierId, origin, destination, travelDate, airfare);



 flights.add(flight);



 System.out.println("Flight Added Successfully with Flight ID: "



  + flight.getFlightId());



 }



 public Flight getFlightById(int flightId) {



 for (Flight flight : flights) {



  if (flight.getFlightId() == flightId) {



  return flight;



  }



 }



 return null;



 }



 public List<Flight> getFlightsByCarrierAndDate(int carrierId, Date travelDate) {



 List<Flight> result = new ArrayList<>();



 for (Flight flight : flights) {



  if (flight.getCarrierId() == carrierId && flight.getTravelDate().equals(travelDate)) {



  result.add(flight);



  }



 }



 return result;



 }



 public List<Flight> getAllFlights() {



 return flights;



 }



 public List<Flight> getAllFlightsFromOriginToDestination(String origin, String destination, Date travelDate){



 List<Flight> answer= new ArrayList<>();



 for(Flight flight: flights) {



  if(flight.getOrigin().equalsIgnoreCase(origin) &&



   flight.getDestination().equals(destination) &&



   flight.getTravelDate().equals(travelDate)) {



  answer.add(flight);



  }



 }



 return answer;



 }



 public void displayAllFlights() {



 if (flights.isEmpty()) {



  System.out.println("No Flights Available.");



  return;



 }



 for (Flight flight : flights) {



  flight.displayFlightInfo();



  System.out.println("----------------------------");



 }



 }



 public void removeFlight(int flightId) {



 Flight flight = getFlightById(flightId);



 if (flight != null) {



  flights.remove(flight);



  System.out.println("Flight Removed Successfully.");



 } else {



  System.out.println("Flight ID not found.");



 }



 }



}



---------------------------------------------------------------------------------------------------------



		//UserService class



---------------------------------------------------------------------------------------------------------



package services;







import java.util.*;



import models.Customer;



import models.Admin;



public class UserService {



 private ArrayList<Admin> admins = new ArrayList<>();



 private ArrayList<Customer> customers = new ArrayList<>();



 private int customerCount = 2000;



 public UserService() {



 // Adding default admin



 admins.add(new Admin(1, "admin", "admin123"));



 }



 // Admin Authentication



 public Admin authenticateAdmin(int userId, String password) {



 for (Admin admin : admins) {



  if (admin.getUserId() == userId && admin.verifyPassword(password)) {



  return admin;



  }



 }



 return null;



 }



 // Customer Authentication



 public Customer authenticateCustomer(int userId, String password) {



 for (Customer customer : customers) {



  if (customer.getUserId() == userId && customer.verifyPassword(password)) {



  return customer;



  }



 }



 return null;



 }



 // Customer Registration



 public Customer registerCustomer(String userName, String password, long phone, String emailId,



  String address1, String address2, String city, String state,



  String country, long zipCode, Date dob) {



 Customer customer = new Customer(customerCount++, userName, password, phone, emailId,



  address1, address2, city, state, country, zipCode, dob);



 customers.add(customer);



 return customer;



 }



 // get customer details



 public Customer getCustomerById(int userId) {



 for (Customer customer : customers) {



  if (customer.getUserId() == userId) {



  return customer;



  }



 }



 return null;



 }



 public void addCustomer(Customer customer) {



 customers.add(customer);



 }



}







---------------------------------------------------------------------------------------------------------







// utils package



			//Utils.class







----------------------------------------------------------------------------------------------------------



package utils;







import java.util.*;



import java.text.*;



public class Utils {



 private static Scanner sc = new Scanner(System.in);



 public static int getIntInput(String prompt) {



  int val;



  while (true) {



   try {



    System.out.print(prompt);



    val = Integer.parseInt(sc.nextLine());



    break;



   } catch (NumberFormatException e) {



    System.out.println("Invalid input. Please enter an integer.");



   }



  }



  return val;



 }



 public static long getLongInput(String prompt) {



  long val;



  while (true) {



   try {



    System.out.print(prompt);



    val = Long.parseLong(sc.nextLine());



    break;



   } catch (NumberFormatException e) {



    System.out.println("Invalid input. Please enter a valid number.");



   }



  }



  return val;



 }



 public static double getDoubleInput(String prompt) {



  double val;



  while (true) {



   try {



    System.out.print(prompt);



    val = Double.parseDouble(sc.nextLine());



    break;



   } catch (NumberFormatException e) {



    System.out.println("Invalid input. Please enter a valid number.");



   }



  }



  return val;



 }



 public static String getStringInput(String prompt) {



  System.out.print(prompt);



  return sc.nextLine();



 }



 public static Date getDateInput(String prompt) {



  Date date = null;



  SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");



  while (true) {



   try {



    System.out.print(prompt + " (dd-MM-yyyy): ");



    String input = sc.nextLine();



    date = sdf.parse(input);



    break;



   } catch (Exception e) {



    System.out.println("Invalid date format. Please enter again.");



   }



  }



  return date;



 }



}







----------------------------------------------------------------------------------------------------------







https://writexo.com/ItachiUchiha



